# Dictionary to store shape data

import math
import numpy

def magnitude(vector):
    return numpy.linalg.norm(vector)

def get_normal(surfaces, vertices):
    
    p1,p2,p3 = surfaces[0],surfaces[1],surfaces[2]
    #u,v = p2-p1,p3-p1
    
    point1,point2,point3 = vertices[p1],vertices[p2],vertices[p3]
    u = numpy.subtract(point2,point1)
    v = numpy.subtract(point3,point2)
    normal = numpy.cross(u,v)
    magn = magnitude(normal)
    if magn != 0: 
        normal = numpy.divide(normal, magn)
    return normal

phi = (1 + math.sqrt(5))/2
k = 1/math.sqrt(3)

shape_data = {
    'Tetrahedron': {
        'vertices': (
            (math.sqrt(3)/3, math.sqrt(3)/3, -math.sqrt(3)/3),
            (-math.sqrt(3)/3, -math.sqrt(3)/3, -math.sqrt(3)/3),
            (math.sqrt(3)/3, -math.sqrt(3)/3, math.sqrt(3)/3),
            (-math.sqrt(3)/3, math.sqrt(3)/3, math.sqrt(3)/3)
        ),
        'edges': (
            (0,1), (0,2), (0,3), (1,2), (1,3), (2,3)
        ),
        'texture_coords': [
            
            ((100/400, 0/100), (50/400, 100/100), (0/400, 0/100)), #1
            ((200/400, 0/100), (150/400, 100/100), (100/400, 0/100)), #2
            ((300/400, 0/100), (250/400, 100/100), (200/400, 0/100)), #3
            ((400/400, 0/100), (350/400, 100/100), (300/400, 0/100)) #4
        ],
        'surfaces' : (
            (0, 2, 1),  # Face 1
            (0, 1, 3),  # Face 2
            (0, 3, 2),  # Face 3
            (1, 2, 3)   # Face 4
        )

    },
    'Cube': {
        'vertices': (
            (1, -1, -1), (1, 1, -1), (-1, 1, -1), (-1, -1, -1),
            (1, -1, 1), (1, 1, 1), (-1, -1, 1), (-1, 1, 1)
        ),
        'edges': (
            (0,1), (0,3), (0,4), (2,1), (2,3), (2,7),
            (6,3), (6,4), (6,7), (5,1), (5,4), (5,7)
        ),
        'texture_coords': [
            ((100/600, 0), (200/600, 0), (200/600, 100/100), (100/600, 100/100)), #2
            ((300/600, 0), (400/600, 0), (400/600, 100/100), (300/600, 100/100)), #4
            ((400/600, 0), (500/600, 0), (500/600, 100/100), (400/600, 100/100)), #5
            ((200/600, 0), (300/600, 0), (300/600, 100/100), (200/600, 100/100)), #3
            ((0, 0), (100/600, 0), (100/600, 100/100), (0, 100/100)), #1
            ((500/600, 0), (600/600, 0), (600/600, 100/100), (500/600, 100/100)) #6
        ],
        'surfaces': (
            (3,2,1,0), (6,7,2,3), (4,5,7,6), (0,1,5,4), (2,7,5,1), (6,3,0,4)
        ),
        'normals': [
            ( 0,  0, -1),  # surface 0
            (-1,  0,  0),  # surface 1
            ( 0,  0,  1),  # surface 2
            ( 1,  0,  0),  # surface 3
            ( 0,  1,  0),  # surface 4
            ( 0, -1,  0)   # surface 5
        ],
    },
    'Octahedron': {
        'vertices': (
            (1, 0, 0), (0, -1, 0), (-1, 0, 0), (0, 1, 0),
            (0, 0, 1), (0, 0, -1)
        ),
        'edges': (
            (0,1), (0,3), (0,4), (0,5), (1,2), (1,4), (1,5), (2,3),
            (2,4), (2,5), (3,4), (3,5)
        ),
        'texture_coords': [
        # Fixed coordinates for faces 1, 5, and 6
        ((100/400, 100/200), (50/400, 200/200), (0/400, 100/200)),  # 1
        ((200/400, 100/200), (150/400, 200/200), (100/400, 100/200)), #2
        ((200/400, 100/200), (250/400, 200/200), (300/400, 100/200)), #3
        ((300/400, 100/200), (350/400, 200/200), (400/400, 100/200)), #4
        ((100/400, 0/200), (50/400, 100/200), (0/400, 0/200)),  # 5
        ((200/400, 0/200), (150/400, 100/200), (100/400, 0/200)),  # 6
        ((200/400, 0/200), (250/400, 100/200), (300/400, 0/200)),  # 7
        ((300/400, 0/200), (350/400, 100/200), (400/400, 0/200))  # 8
            ],
        'surfaces': (
            (0, 4, 1),  # Face 1: Vertex 0, 4, 1
            (0, 3, 4),  # Face 2: Vertex 0, 3, 4
            (2, 4, 1),  # Face 3: Vertex 2, 4, 1
            (2, 3, 4),  # Face 4: Vertex 2, 3, 4
            (0, 1, 5),  # Face 5: Vertex 0, 1, 5
            (0, 5, 3),  # Face 6: Vertex 0, 5, 3
            (2, 1, 5),  # Face 7: Vertex 2, 1, 5
            (2, 5, 3)   # Face 8: Vertex 2, 5, 3
        )

    },
    'Dodecahedron': {
        'vertices': (
            (k, k, k),          #0
            (-k, k, k),         #1
            (k, -k, k),         #2
            (-k, -k, k),        #3
            (k, k, -k),         #4
            (-k, k, -k),        #5
            (k, -k, -k),        #6
            (-k,-k,-k),         #7

            (0, k/phi, k*phi),   #8
            (0, k/phi, -k*phi),  #9
            (0, -k/phi, k*phi),  #10
            (0, -k/phi, -k*phi), #11

            (k/phi, k*phi, 0),   #12
            (k/phi, -k*phi, 0),  #13
            (-k/phi, k*phi, 0),  #14
            (-k/phi, -k*phi, 0), #15
            (k*phi, 0, k/phi),   #16
            (k*phi, 0, -k/phi),  #17
            (-k*phi, 0, k/phi),  #18
            (-k*phi, 0, -k/phi)  #19
        ),
        'edges': (
           (0, 8), (0, 12), (0, 16), (1, 8), (1, 14), (1, 18), 
           (2, 10), (2, 13), (2, 16), (3, 10), (3, 15), (3, 18), 
           (4, 9), (4, 12), (4, 17), (5, 9), (5, 14), (5, 19), 
           (6, 11), (6, 13), (6, 17), (7, 11), (7, 15), (7, 19), 
           (8, 10), (9, 11), (12, 14), (13, 15), (16, 17), (18, 19)
        ),
        'texture_coords' : [
  
            ((50/600, 1 - 0/200), (100/600, 1 - 50/200), (82/600, 1 - 100/200), (18/600, 1 - 100/200),  (0/600, 1 - 50/200)), #1
            ((100/600, 1 - 50/200), (118/600, 1 - 100/200), (182/600, 1 - 100/200), (200/600, 1 - 50/200), (150/600, 1 - 0/200)), #2
            ((250/600, 1 - 0/200), (300/600, 1 - 50/200), (282/600, 1 - 100/200), (218/600, 1 - 100/200),  (200/600, 1 - 50/200)), #3
            ((350/600, 1 - 0/200), (400/600, 1 - 50/200), (382/600, 1 - 100/200), (318/600, 1 - 100/200),  (300/600, 1 - 50/200)), #4
            ((450/600, 1 - 0/200), (500/600, 1 - 50/200), (482/600, 1 - 100/200), (418/600, 1 - 100/200),  (400/600, 1 - 50/200)), #5
            ((550/600, 1 - 0/200), (600/600, 1 - 50/200), (582/600, 1 - 100/200), (518/600, 1 - 100/200),  (500/600, 1 - 50/200)), #6
            ((50/600, 1 - 100/200), (100/600, 1 - 150/200), (82/600, 1 - 200/200), (18/600, 1 - 200/200),  (0/600, 1 - 150/200)), #7
            ((150/600, 1 - 100/200), (200/600, 1 - 150/200), (182/600, 1 - 200/200), (118/600, 1 - 200/200),  (100/600, 1 - 150/200)), #8
            ((250/600, 1 - 100/200), (300/600, 1 - 150/200), (282/600, 1 - 200/200), (218/600, 1 - 200/200),  (200/600, 1 - 150/200)), #9
            ((350/600, 1 - 100/200), (400/600, 1 - 150/200), (382/600, 1 - 200/200), (318/600, 1 - 200/200),  (300/600, 1 - 150/200)), #10
            ((400/600, 1 - 150/200), (418/600, 1 - 200/200), (482/600, 1 - 200/200), (500/600, 1 - 150/200), (450/600, 1 - 100/200)), #11
            ((550/600, 1 - 100/200), (600/600, 1 - 150/200), (582/600, 1 - 200/200), (518/600, 1 - 200/200),  (500/600, 1 - 150/200)) #12
        ],
        'surfaces' : (
            (10,2,13,15,3), #1
            (10,2,16,0,8),  #2
            (8,1,14,12,0),   #3
            (1,18,19,5,14),   #4
            (3,15,7,19,18),   #5
            (2,16,17,6,13),   #6
            (0,12,4,17,16),   #7
            (14,5,9,4,12),    #8
            (19,7,11,9,5),    #9
            (17,4,9,11,6),    #10
            (8,1,18,3,10),    #11
            (13,6,11,7,15)      #12
        )
    },
    'Icosahedron': {
        'vertices': (
            (1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0, (1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)),
            (-1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0, (1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)),
            ((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0),
            ((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2), -1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0),
            (0, -((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), 1/math.sqrt(1+((1 + math.sqrt(5))/2)**2)),
            (0, -((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), -1/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), 
            (-((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), 1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0),
            (-((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), -1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0),
            (0, ((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), 1/math.sqrt(1+((1 + math.sqrt(5))/2)**2)),
            (0, ((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)), -1/math.sqrt(1+((1 + math.sqrt(5))/2)**2)),
            (1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0, -((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2))),
            (-1/math.sqrt(1+((1 + math.sqrt(5))/2)**2), 0, -((1 + math.sqrt(5))/2/math.sqrt(1+((1 + math.sqrt(5))/2)**2)))
        ),
        'edges': (
            (0,1), (0,2), (0,3), (0,4), (0,8), (1,4), (1,6), (1,7),
            (1,8), (2,3), (2,8), (2,9), (2,10), (3,4), (3,5), (3,10),
            (4,5), (4,7), (5,7), (5,10), (5,11), (6,7), (6,8), (6,9),
            (6,11), (7,11), (8,9), (9,10), (9,11), (10,11)
        ),
        'texture_coords':
            #image is 400x500 px
    [
        ((100/400, 400/500), (0/400, 400/500), (50/400, 500/500)), #1
        ((200/400, 400/500), (100/400, 400/500), (150/400, 500/500)), #2
        ((300/400, 400/500), (200/400, 400/500), (250/400, 500/500)), #3
        ((400/400, 400/500), (300/400, 400/500), (350/400, 500/500)), #4
        ((100/400, 300/500), (0/400, 300/500), (50/400, 400/500)), #5
        ((200/400, 300/500), (100/400, 300/500), (150/400, 400/500)), #6
        ((300/400, 300/500), (200/400, 300/500), (250/400, 400/500)), #7
        ((400/400, 300/500), (300/400, 300/500), (350/400, 400/500)), #8
        ((0/400, 200/500), (100/400, 200/500), (50/400, 300/500)), #9
        ((100/400, 200/500), (200/400, 200/500), (150/400, 300/500)), #10
        ((200/400, 200/500), (300/400, 200/500), (250/400, 300/500)), #11
        ( (350/400, 300/500), (300/400, 200/500), (400/400, 200/500)), #12
        ((0/400, 100/500), (100/400, 100/500), (50/400, 200/500)), #13
        ((100/400, 100/500), (200/400, 100/500), (150/400, 200/500)), #14
        ((200/400, 100/500), (300/400, 100/500), (250/400, 200/500)), #15
        ((300/400, 100/500), (400/400, 100/500), (350/400, 200/500)), #16
        ((100/400, 0/500), (0/400, 0/500), (50/400, 100/500)), #17
        ((200/400, 0/500), (100/400, 0/500), (150/400, 100/500)), #18
        ( (200/400, 0/500), (300/400, 0/500), (250/400, 100/500) ), #19
        ( (350/400, 100/500), (300/400, 0/500),  (400/400, 0/500)) #20
],
        'surfaces' : (
            (0, 4, 1),  # Face 1
            (0, 3, 4),  # Face 2
            (0, 2, 3),  # Face 3
            (0, 8, 2),  # Face 4
            (0, 1, 8),  # Face 5
            (1, 7, 6),  # Face 6
            (1, 4, 7),  # Face 7
            (1, 6, 8),  # Face 8
            (2, 10, 9), # Face 9
            (2, 3, 10), # Face 10
            (2, 9, 8),  # Face 11
            (3, 4, 5),  # Face 12
            (3, 5, 10), # Face 13
            (4, 7, 5),  # Face 14
            (5, 7, 11), # Face 15
            (5, 11, 10),# Face 16
            (6, 9, 8),  # Face 17
            (6, 11, 9), # Face 18
            (7, 6, 11), # Face 19
            (9, 10, 11) # Face 20
        ),
    }
}

tetra_normals = []
for face in shape_data['Tetrahedron']['surfaces']:
    tetra_normals.append(get_normal(face,shape_data['Tetrahedron']['vertices']))
shape_data['Tetrahedron']['normals'] = tetra_normals


oct_normals = []
for face in shape_data['Octahedron']['surfaces']:
    oct_normals.append(get_normal(face,shape_data['Octahedron']['vertices']))
shape_data['Octahedron']['normals'] = oct_normals

dod_normals = []
for face in shape_data['Dodecahedron']['surfaces']:
    dod_normals.append(get_normal(face,shape_data['Dodecahedron']['vertices']))
shape_data['Dodecahedron']['normals'] = dod_normals

icos_normals = []
for face in shape_data['Icosahedron']['surfaces']:
    icos_normals.append(get_normal(face,shape_data['Icosahedron']['vertices']))
shape_data['Icosahedron']['normals'] = icos_normals
